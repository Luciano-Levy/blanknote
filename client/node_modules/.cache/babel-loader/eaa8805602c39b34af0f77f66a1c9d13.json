{"ast":null,"code":"var _jsxFileName = \"/home/luciano/Dev/Blanktxt/client/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './styles/text.css';\nimport useIdentificator from './modulos/idenficatorHook.js';\nimport ModalLogin from './components/ModalLogin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Text() {\n  _s();\n\n  const [txt, Settxt] = useState(''); //true == escribir\n\n  const [shift, Setshift] = useState(true); //const[user, SetUser] = useState('')\n\n  const [login, Setlogin] = useState(true); //guardado del texto en db, cada rende\n\n  useEffect(() => {\n    postTxt(txt);\n  });\n  useIdentificator(Setlogin, Settxt); //maneja el cambio de valores y intercambia visibilidad con el estatico\n\n  function changeInpt(e) {\n    const textareaValue = e.target.value;\n\n    if (textareaValue.length > 0) {\n      Setshift(false);\n      Settxt(textareaValue);\n    }\n\n    ;\n  }\n\n  ;\n\n  function changeDispl(e) {\n    Setshift(true);\n  }\n\n  ; //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        changeInpt: changeInpt,\n        shift: shift\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Display, {\n        changeDispl: changeDispl,\n        txt: txt,\n        shift: shift\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), login && /*#__PURE__*/_jsxDEV(ModalLogin, {\n      Setlogin: Setlogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Text, \"c2FnYn8j2u+Y/Zv7/H6uuPlQ5rQ=\", false, function () {\n  return [useIdentificator];\n});\n\n_c = Text;\n;\nexport function Input(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"txtInput\",\n      spellCheck: \"true\",\n      placeholder: \"Escribi lo que quieras!!\",\n      autoFocus: true,\n      onBlur: props.changeInpt,\n      style: {\n        display: props.shift ? 'block' : 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c2 = Input;\n;\nexport function Display(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"txtDisplay\",\n    onClick: props.changeDispl,\n    style: {\n      display: props.shift ? 'none' : 'block'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: props.txt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_c3 = Display;\n;\nexport async function postTxt(txt) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: localStorage.getItem('username'),\n      txt: txt\n    })\n  };\n  const rawResponse = await fetch(\"/api\", requestOptions);\n}\nexport default Text;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Text\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Display\");","map":{"version":3,"sources":["/home/luciano/Dev/Blanktxt/client/src/App.jsx"],"names":["React","useState","useEffect","useIdentificator","ModalLogin","Text","txt","Settxt","shift","Setshift","login","Setlogin","postTxt","changeInpt","e","textareaValue","target","value","length","changeDispl","Input","props","display","Display","requestOptions","method","headers","body","JSON","stringify","user","localStorage","getItem","rawResponse","fetch"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './styles/text.css';\nimport useIdentificator from './modulos/idenficatorHook.js';\nimport ModalLogin from './components/ModalLogin'\n\n\nfunction Text() {\n\n  const[txt, Settxt] = useState('');\n\n  //true == escribir\n  const[shift, Setshift] = useState(true);\n\n  //const[user, SetUser] = useState('')\n\n  const[login, Setlogin] = useState(true)\n\n  //guardado del texto en db, cada rende\n  useEffect(() => {\n    postTxt(txt)\n    \n  }\n);\n\n  useIdentificator(Setlogin, Settxt);\n\n  //maneja el cambio de valores y intercambia visibilidad con el estatico\n  function changeInpt(e){\n    const textareaValue = e.target.value;\n    if (textareaValue.length > 0) {\n      Setshift(false);\n      Settxt(textareaValue);\n\n    };\n  };\n\n  function changeDispl(e){\n    Setshift(true);\n  };\n  //\n\n  return(\n    <div>\n\n      <div className='container'>\n        <Input changeInpt={changeInpt} shift={shift}></Input>\n        <Display changeDispl={changeDispl} txt={txt} shift={shift}></Display>\n      </div>\n      {login && <ModalLogin Setlogin={Setlogin}></ModalLogin>}\n    </div>\n  );\n};\n\nexport function Input(props){\n  return(\n    <>\n      <textarea className='txtInput' spellCheck='true' placeholder='Escribi lo que quieras!!' autoFocus onBlur={props.changeInpt} style={{display: props.shift ? 'block' : 'none'}}></textarea>\n    </>\n  );\n};\n\nexport function Display(props){\n  return(\n    <div className='txtDisplay' onClick={props.changeDispl} style={{display: props.shift ? 'none' : 'block'}} >\n      <pre >{props.txt}</pre>\n    </div>\n  );\n};\n\nexport async function postTxt(txt){\n\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({user:localStorage.getItem('username'),txt: txt})\n  };\n\n  const rawResponse = await fetch(\"/api\", requestOptions);\n\n\n}\n\n\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}