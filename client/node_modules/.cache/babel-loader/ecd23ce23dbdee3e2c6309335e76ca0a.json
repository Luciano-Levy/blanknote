{"ast":null,"code":"var _jsxFileName = \"/home/luciano/Dev/Blanktxt/client/src/components/ConfigMenu.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport '../styles/config.css';\nimport { ReactComponent as ConfigIcon } from '../images/config.svg';\nimport { ReactComponent as CrossIcon } from '../images/cross.svg';\nimport rgbHex from 'rgb-hex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CongifMenu() {\n  _s();\n\n  const [fontSize, SetfontSize] = useState(null);\n  const [font, Setfont] = useState(null);\n  const [color, Setcolor] = useState(null);\n  const [backgroundColor, SetbackgroundColor] = useState(null);\n  const [shift, Setshift] = useState(true); //buscar en localStorage y si no leer los estilos default (puede tener algun modo oscuro)\n\n  useEffect(() => {\n    const configSet = (config, data) => {\n      const setter = Function(`Set${config}(${data})`);\n      return setter;\n    };\n\n    const configs = new Map([['color', 'color'], ['backgroundColor', 'background-color'], ['font', 'font-family'], ['fontSize', 'font-size']]);\n    configs.forEach((config, style) => {\n      const configLocal = localStorage.getItem(config);\n      configSet(config, configLocal)();\n\n      if (configLocal = !null) {\n        configSet(config, configLocal)();\n      } else if (config == 'color' || config == 'backgroundColor') {\n        const bodyColor = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue(style));\n        configSet(config, bodyColor)();\n      } else {\n        const bodyFont = window.getComputedStyle(document.body).getPropertyValue(style);\n        configSet(config, bodyFont)();\n      }\n    });\n    /*\n    configs.map(config => {\n      const configLocal = localStorage.getItem(config);\n      if (configLocal != null){\n         eval(`Set${config}('${configLocal}')`)\n        // mira en el body\n        // bucar manera de en el caso de agregar mas opciones sea facil y menos repetitivo...\n      }else if (config == 'backgroundColor'){\n        //eval(`Set${config}('#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color')))`)\n      }else if (config == 'color') {\n        //eval(`Set${config}('#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color')))`)\n      }else if (config == 'font'){\n        eval(`Set${config}(window.getComputedStyle(document.body).getPropertyValue('font-family'))`)\n      }else{\n        eval(`Set${config}(window.getComputedStyle(document.body).getPropertyValue('font-size'))`)\n       }\n       })*/\n  }, []);\n\n  function configHandler(e) {\n    Setshift(!shift);\n    console.log(backgroundColor);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"configBox\",\n    children: [/*#__PURE__*/_jsxDEV(ConfigIcon, {\n      className: \"icon\",\n      onClick: configHandler,\n      style: {\n        display: shift ? 'block' : 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Config, {\n      shift: shift,\n      configHandler: configHandler,\n      backgroundColor: backgroundColor,\n      placeholders: [font, fontSize, color, backgroundColor]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CongifMenu, \"NI3VscwQ5LbN6VOx/TqAEJBCweQ=\");\n\n_c = CongifMenu;\n;\nexport function Config(props) {\n  // mejorar la estetica de la cruz, user una que matchee mas con el gear\n  // hacer los manejadores de eventos en Ap\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      display: props.shift ? 'none' : 'block'\n    },\n    onBlur: console.log('as'),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"configForm\",\n      children: [/*#__PURE__*/_jsxDEV(CrossIcon, {\n        className: \"icon\",\n        onClick: props.configHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Fuente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"font\",\n          type: \"text\",\n          placeholder: props.placeholders[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Tama\\xF1o fuente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"\",\n          id: \"font-size\",\n          placeholder: props.placeholders[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          defaultValue: props.placeholders[2]\n        }, `${Math.floor(Math.random() * 1000)}-min`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Fondo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          defaultValue: props.placeholders[3]\n        }, `${Math.floor(Math.random() * 1000)}-min`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Config;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CongifMenu\");\n$RefreshReg$(_c2, \"Config\");","map":{"version":3,"sources":["/home/luciano/Dev/Blanktxt/client/src/components/ConfigMenu.jsx"],"names":["React","useState","useEffect","ReactComponent","ConfigIcon","CrossIcon","rgbHex","CongifMenu","fontSize","SetfontSize","font","Setfont","color","Setcolor","backgroundColor","SetbackgroundColor","shift","Setshift","configSet","config","data","setter","Function","configs","Map","forEach","style","configLocal","localStorage","getItem","bodyColor","window","getComputedStyle","document","body","getPropertyValue","bodyFont","configHandler","e","console","log","display","Config","props","placeholders","Math","floor","random"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react';\nimport '../styles/config.css'\nimport {ReactComponent as ConfigIcon} from '../images/config.svg';\nimport {ReactComponent as CrossIcon} from '../images/cross.svg';\nimport rgbHex from 'rgb-hex';\n\nexport default function CongifMenu(){\n\n  const[fontSize,SetfontSize] = useState(null)\n  const[font,Setfont] = useState(null)\n  const[color,Setcolor] = useState(null)\n  const[backgroundColor,SetbackgroundColor] = useState(null);\n\n  const[shift, Setshift] = useState(true);\n\n  //buscar en localStorage y si no leer los estilos default (puede tener algun modo oscuro)\n  useEffect(()=>{\n\n    const configSet = (config,data) => {\n      const setter = Function(`Set${config}(${data})`)\n      return setter\n    }\n\n    const configs = new Map([['color','color'],['backgroundColor','background-color'],['font','font-family'],['fontSize','font-size']])\n\n    configs.forEach((config, style) => {\n      const configLocal = localStorage.getItem(config);\n      configSet(config,configLocal)()\n      if (configLocal =! null) {\n        configSet(config,configLocal)()\n      }else if (config == 'color' || config == 'backgroundColor'){\n        const bodyColor = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue(style))\n      \n        configSet(config, bodyColor)();\n      } else{\n        const bodyFont = window.getComputedStyle(document.body).getPropertyValue(style);\n        configSet(config,bodyFont)();\n      }\n    });\n\n\n    /*\n    configs.map(config => {\n      const configLocal = localStorage.getItem(config);\n      if (configLocal != null){\n\n        eval(`Set${config}('${configLocal}')`)\n        // mira en el body\n        // bucar manera de en el caso de agregar mas opciones sea facil y menos repetitivo...\n      }else if (config == 'backgroundColor'){\n        //eval(`Set${config}('#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color')))`)\n      }else if (config == 'color') {\n        //eval(`Set${config}('#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color')))`)\n      }else if (config == 'font'){\n        eval(`Set${config}(window.getComputedStyle(document.body).getPropertyValue('font-family'))`)\n      }else{\n        eval(`Set${config}(window.getComputedStyle(document.body).getPropertyValue('font-size'))`)\n\n      }\n\n\n\n    })*/\n  },[])\n\n\n\n  function configHandler(e){\n    Setshift(!shift);\n    console.log(backgroundColor);\n\n\n  }\n\n  return(\n    <div className='configBox'>\n      <ConfigIcon className='icon' onClick={configHandler}\n      style={{display: shift ? 'block' : 'none'}} ></ConfigIcon>\n      <Config shift={shift} configHandler={configHandler} backgroundColor={backgroundColor} placeholders={[font,fontSize,color,backgroundColor]}></Config>\n    </div>\n  );\n};\n\nexport function Config(props){\n  // mejorar la estetica de la cruz, user una que matchee mas con el gear\n  // hacer los manejadores de eventos en Ap\n\n\n  return(\n\n    <form style={{display: props.shift ? 'none' : 'block'}} onBlur={console.log('as')}>\n\n      <div className='configForm'>\n        <CrossIcon className='icon' onClick={props.configHandler}></CrossIcon>\n        <div>\n          <label>Fuente</label>\n          <input id='font' type=\"text\"  placeholder={props.placeholders[0]} />\n        </div>\n        <div>\n          <label>Tamaño fuente</label>\n          <input type=\"\" id='font-size' placeholder={props.placeholders[1]}  />\n        </div>\n        <div>\n          <label>Color</label>\n          <input type=\"color\" defaultValue={props.placeholders[2]} key={`${Math.floor((Math.random() * 1000))}-min`}  />\n        </div>\n        <div>\n          <label>Fondo</label>\n          <input type=\"color\" defaultValue={props.placeholders[3]} key={`${Math.floor((Math.random() * 1000))}-min`} />\n        </div>\n      </div>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}