{"ast":null,"code":"import rgbHex from 'rgb-hex';\nexport const configsInit = (Setcolor, SetbackgroundColor, Setfont, SetfontSize) => {\n  const configs = ['color', 'backgroundColor', 'font', 'fontSize']; // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n  // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n  configs.map(a => {\n    const configLocal = localStorage.getItem(a);\n\n    if (configLocal != null) {\n      switch (a) {\n        case 'color':\n          Setcolor(configLocal);\n          break;\n\n        case 'backgroundColor':\n          SetbackgroundColor(configLocal);\n          break;\n\n        case 'font':\n          Setfont(configLocal);\n          break;\n\n        case 'fontSize':\n          SetfontSize(configLocal);\n          break;\n      }\n    } else {\n      switch (a) {\n        case 'color':\n          const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'));\n          Setcolor(color);\n          localStorage.setItem('color', color);\n          break;\n\n        case 'backgroundColor':\n          const backgroundColor = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'));\n          SetbackgroundColor(backgroundColor);\n          localStorage.setItem('backgroundColor', backgroundColor);\n          break;\n\n        case 'font':\n          const font = window.getComputedStyle(document.body).getPropertyValue('font-family');\n          Setfont(font);\n          localStorage.setItem('font', font);\n          break;\n\n        case 'fontSize':\n          const fontSize = window.getComputedStyle(document.body).getPropertyValue('font-size');\n          SetfontSize(fontSize);\n          localStorage.setItem('fontSize', fontSize);\n          break;\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/home/luciano/Dev/Blanktxt/client/src/components/functions.js"],"names":["rgbHex","configsInit","Setcolor","SetbackgroundColor","Setfont","SetfontSize","configs","map","a","configLocal","localStorage","getItem","color","window","getComputedStyle","document","body","getPropertyValue","setItem","backgroundColor","font","fontSize"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AAGA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAUC,kBAAV,EAA6BC,OAA7B,EAAqCC,WAArC,KAAqD;AAE9E,QAAMC,OAAO,GAAG,CAAC,OAAD,EAAU,iBAAV,EAA6B,MAA7B,EAAqC,UAArC,CAAhB,CAF8E,CAI9E;AACA;;AAGAA,EAAAA,OAAO,CAACC,GAAR,CAAYC,CAAC,IAAI;AAEf,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBH,CAArB,CAApB;;AACA,QAAIC,WAAW,IAAI,IAAnB,EAAwB;AAEtB,cAAQD,CAAR;AACE,aAAK,OAAL;AACAN,UAAAA,QAAQ,CAACO,WAAD,CAAR;AACA;;AACA,aAAK,iBAAL;AACAN,UAAAA,kBAAkB,CAACM,WAAD,CAAlB;AACA;;AACA,aAAK,MAAL;AACAL,UAAAA,OAAO,CAACK,WAAD,CAAP;AACA;;AACA,aAAK,UAAL;AACAJ,UAAAA,WAAW,CAACI,WAAD,CAAX;AACA;AAZF;AAeD,KAjBD,MAiBK;AAEH,cAAQD,CAAR;AACA,aAAK,OAAL;AACA,gBAAMI,KAAK,GAAG,MAAMZ,MAAM,CAACa,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,OAAxD,CAAD,CAA1B;AACAf,UAAAA,QAAQ,CAACU,KAAD,CAAR;AACAF,UAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BN,KAA9B;AACA;;AACA,aAAK,iBAAL;AACA,gBAAMO,eAAe,GAAI,MAAMnB,MAAM,CAACa,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,kBAAxD,CAAD,CAArC;AACAd,UAAAA,kBAAkB,CAACgB,eAAD,CAAlB;AACAT,UAAAA,YAAY,CAACQ,OAAb,CAAqB,iBAArB,EAAwCC,eAAxC;AACA;;AACA,aAAK,MAAL;AACA,gBAAMC,IAAI,GAAGP,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,aAAxD,CAAb;AACAb,UAAAA,OAAO,CAACgB,IAAD,CAAP;AACAV,UAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA4BE,IAA5B;AACA;;AACA,aAAK,UAAL;AACA,gBAAMC,QAAQ,GAAIR,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,WAAxD,CAAlB;AACAZ,UAAAA,WAAW,CAACgB,QAAD,CAAX;AACAX,UAAAA,YAAY,CAACQ,OAAb,CAAqB,UAArB,EAAiCG,QAAjC;AACA;AApBA;AAwBD;AACA,GA/CH;AAoDD,CA5DM","sourcesContent":["import rgbHex from 'rgb-hex';\n\n\nexport const configsInit = (Setcolor,SetbackgroundColor,Setfont,SetfontSize) => {\n\n  const configs = ['color', 'backgroundColor', 'font', 'fontSize']\n\n  // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n  // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n\n  configs.map(a => {\n\n    const configLocal = localStorage.getItem(a);\n    if (configLocal != null){\n\n      switch (a) {\n        case 'color':\n        Setcolor(configLocal)\n        break;\n        case 'backgroundColor':\n        SetbackgroundColor(configLocal)\n        break;\n        case 'font':\n        Setfont(configLocal)\n        break;\n        case 'fontSize':\n        SetfontSize(configLocal)\n        break;\n      }\n\n    }else{\n\n      switch (a) {\n      case 'color':\n      const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'))\n      Setcolor(color)\n      localStorage.setItem('color', color)\n      break;\n      case 'backgroundColor':\n      const backgroundColor =  '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'))\n      SetbackgroundColor(backgroundColor)\n      localStorage.setItem('backgroundColor', backgroundColor)\n      break;\n      case 'font':\n      const font = window.getComputedStyle(document.body).getPropertyValue('font-family')\n      Setfont(font)\n      localStorage.setItem('font',font)\n      break;\n      case 'fontSize':\n      const fontSize =  window.getComputedStyle(document.body).getPropertyValue('font-size')\n      SetfontSize(fontSize)\n      localStorage.setItem('fontSize', fontSize)\n      break;\n\n\n      }\n    }\n    })\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}