{"ast":null,"code":"var _jsxFileName = \"/home/luciano/Dev/Blanktxt/client/src/components/ConfigMenu.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport '../styles/config.css';\nimport { ReactComponent as ConfigIcon } from '../images/config.svg';\nimport { ReactComponent as CrossIcon } from '../images/cross.svg';\nimport rgbHex from 'rgb-hex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CongifMenu() {\n  _s();\n\n  const [fontSize, SetfontSize] = useState(null);\n  const [font, Setfont] = useState(null);\n  const [color, Setcolor] = useState(null);\n  const [backgroundColor, SetbackgroundColor] = useState(null);\n  const [shift, Setshift] = useState(true); // config searcher\n\n  useEffect(() => {\n    const configs = ['color', 'backgroundColor', 'font', 'fontSize']; // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n    // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n    configs.map(a => {\n      const configLocal = localStorage.getItem(a);\n\n      if (configLocal != null) {\n        switch (a) {\n          case 'color':\n            Setcolor(configLocal);\n            break;\n\n          case 'backgroundColor':\n            SetbackgroundColor(configLocal);\n            break;\n\n          case 'font':\n            Setfont(configLocal);\n            break;\n\n          case 'fontSize':\n            SetfontSize(configLocal);\n            break;\n        }\n      } else {\n        switch (a) {\n          case 'color':\n            const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'));\n            Setcolor(color);\n            localStorage.setItem('color', color);\n            break;\n\n          case 'backgroundColor':\n            const backgroundColor = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'));\n            SetbackgroundColor(backgroundColor);\n            localStorage.setItem('backgroundColor', backgroundColor);\n            break;\n\n          case 'font':\n            const font = window.getComputedStyle(document.body).getPropertyValue('font-family');\n            Setfont(font);\n            localStorage.setItem('font', font);\n            break;\n\n          case 'fontSize':\n            const fontSize = window.getComputedStyle(document.body).getPropertyValue('font-size');\n            SetfontSize(fontSize);\n            localStorage.setItem('fontSize', fontSize);\n            break;\n        }\n      }\n    });\n  }, []); //config setter\n\n  useEffect(() => {\n    const bodyStyle = document.body.style;\n    bodyStyle.backgroundColor = backgroundColor;\n    bodyStyle.fontFamily = font;\n    bodyStyle.color = color;\n    bodyStyle.fontSize = fontSize;\n  });\n\n  function configMenuHandler(e) {\n    Setshift(!shift);\n  }\n\n  function configHandler(e) {\n    switch (e.target.id) {\n      case 'color':\n        Setcolor(e.target.value);\n        localStorage.setItem('color', e.target.value);\n        break;\n\n      case 'backgroundColor':\n        SetbackgroundColor(e.target.value);\n        localStorage.setItem('backgroundColor', e.target.value);\n        break;\n\n      case 'font':\n        Setfont(e.target.value);\n        localStorage.setItem('font', e.target.value);\n        break;\n\n      case 'fontSize':\n        SetfontSize(e.target.value);\n        localStorage.setItem('fontSize', e.target.value);\n        break;\n    }\n  } // Seria mejor pasar las configuraciones en un Map o objeto para sacarle rigidez\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"configBox\",\n    children: [/*#__PURE__*/_jsxDEV(ConfigIcon, {\n      className: \"icon\",\n      onClick: configMenuHandler,\n      style: {\n        display: shift ? 'block' : 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Config, {\n      shift: shift,\n      configHandler: configHandler,\n      configMenuHandler: configMenuHandler,\n      backgroundColor: backgroundColor,\n      placeholders: [font, fontSize, color, backgroundColor]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CongifMenu, \"bCplZEEXOtHLkZL/qSRAxhFMEJE=\");\n\n_c = CongifMenu;\n;\nexport function Config(props) {\n  // hacer los manejadores de eventos en Ap\n  // si se agregan mas configs generar los elementos dinamicamente\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      display: props.shift ? 'none' : 'block'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"configForm\",\n      children: [/*#__PURE__*/_jsxDEV(CrossIcon, {\n        className: \"icon\",\n        onClick: props.configMenuHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Fuente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"font\",\n          type: \"text\",\n          placeholder: props.placeholders[0],\n          onChange: props.configHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Tama\\xF1o fuente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"fontSize\",\n          placeholder: props.placeholders[1],\n          onChange: props.configHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          id: \"color\",\n          defaultValue: props.placeholders[2],\n          onChange: props.configHandler\n        }, `${Math.floor(Math.random() * 1000)}-min`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Fondo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          id: \"backgroundColor\",\n          defaultValue: props.placeholders[3],\n          onChange: props.configHandler\n        }, `${Math.floor(Math.random() * 1000)}-min`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Config;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CongifMenu\");\n$RefreshReg$(_c2, \"Config\");","map":{"version":3,"sources":["/home/luciano/Dev/Blanktxt/client/src/components/ConfigMenu.jsx"],"names":["React","useState","useEffect","ReactComponent","ConfigIcon","CrossIcon","rgbHex","CongifMenu","fontSize","SetfontSize","font","Setfont","color","Setcolor","backgroundColor","SetbackgroundColor","shift","Setshift","configs","map","a","configLocal","localStorage","getItem","window","getComputedStyle","document","body","getPropertyValue","setItem","bodyStyle","style","fontFamily","configMenuHandler","e","configHandler","target","id","value","display","Config","props","placeholders","Math","floor","random"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react';\nimport '../styles/config.css'\nimport {ReactComponent as ConfigIcon} from '../images/config.svg';\nimport {ReactComponent as CrossIcon} from '../images/cross.svg';\nimport rgbHex from 'rgb-hex';\n\nexport default function CongifMenu(){\n\n  const[fontSize,SetfontSize] = useState(null)\n  const[font,Setfont] = useState(null)\n  const[color,Setcolor] = useState(null)\n  const[backgroundColor,SetbackgroundColor] = useState(null);\n\n  const[shift, Setshift] = useState(true);\n\n  // config searcher\n  useEffect(()=>{\n\n    const configs = ['color', 'backgroundColor', 'font', 'fontSize']\n\n    // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n    // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n\n    configs.map(a => {\n      const configLocal = localStorage.getItem(a);\n      if (configLocal != null){\n\n      switch (a) {\n        case 'color':\n          Setcolor(configLocal)\n          break;\n        case 'backgroundColor':\n          SetbackgroundColor(configLocal)\n          break;\n        case 'font':\n          Setfont(configLocal)\n          break;\n        case 'fontSize':\n          SetfontSize(configLocal)\n          break;\n\n\n      }\n    }else{\n\n      switch (a) {\n        case 'color':\n          const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'))\n          Setcolor(color)\n          localStorage.setItem('color', color)\n          break;\n        case 'backgroundColor':\n          const backgroundColor =  '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'))\n          SetbackgroundColor(backgroundColor)\n          localStorage.setItem('backgroundColor', backgroundColor)\n          break;\n        case 'font':\n          const font = window.getComputedStyle(document.body).getPropertyValue('font-family')\n          Setfont(font)\n          localStorage.setItem('font',font)\n          break;\n        case 'fontSize':\n          const fontSize =  window.getComputedStyle(document.body).getPropertyValue('font-size')\n          SetfontSize(fontSize)\n          localStorage.setItem('fontSize', fontSize)\n          break;\n\n\n    }\n  }\n})\n\n  },[])\n\n  //config setter\n  useEffect(() => {\n    const bodyStyle = document.body.style\n    bodyStyle.backgroundColor = backgroundColor;\n    bodyStyle.fontFamily = font;\n    bodyStyle.color = color;\n    bodyStyle.fontSize = fontSize\n  })\n\n  function configMenuHandler(e){\n    Setshift(!shift);\n  }\n\n  function configHandler(e){\n    switch (e.target.id) {\n      case 'color':\n        Setcolor(e.target.value)\n        localStorage.setItem('color', e.target.value)\n        break;\n      case 'backgroundColor':\n        SetbackgroundColor(e.target.value)\n        localStorage.setItem('backgroundColor', e.target.value)\n        break;\n      case 'font':\n        Setfont(e.target.value)\n        localStorage.setItem('font', e.target.value)\n        break;\n      case 'fontSize':\n        SetfontSize(e.target.value)\n        localStorage.setItem('fontSize', e.target.value)\n        break;\n  }\n}\n\n  // Seria mejor pasar las configuraciones en un Map o objeto para sacarle rigidez\n  return(\n    <div className='configBox'>\n      <ConfigIcon className='icon' onClick={configMenuHandler} style={{display: shift ? 'block' : 'none'}} ></ConfigIcon>\n      <Config shift={shift} configHandler={configHandler} configMenuHandler={configMenuHandler} backgroundColor={backgroundColor} placeholders={[font,fontSize,color,backgroundColor]}></Config>\n    </div>\n  );\n};\n\nexport function Config(props){\n\n  // hacer los manejadores de eventos en Ap\n  // si se agregan mas configs generar los elementos dinamicamente\n  return(\n\n    <form style={{display: props.shift ? 'none' : 'block'}}>\n\n      <div className='configForm'>\n        <CrossIcon className='icon' onClick={props.configMenuHandler}></CrossIcon>\n        <div>\n          <label>Fuente</label>\n          <input id='font' type=\"text\"  placeholder={props.placeholders[0]} onChange={props.configHandler}/>\n        </div>\n        <div>\n          <label>Tamaño fuente</label>\n          <input type=\"text\" id='fontSize' placeholder={props.placeholders[1]} onChange={props.configHandler} />\n        </div>\n        <div>\n          <label>Color</label>\n          <input type=\"color\" id='color' defaultValue={props.placeholders[2]} key={`${Math.floor((Math.random() * 1000))}-min`} onChange={props.configHandler} />\n        </div>\n        <div>\n          <label>Fondo</label>\n          <input type=\"color\" id='backgroundColor' defaultValue={props.placeholders[3]} key={`${Math.floor((Math.random() * 1000))}-min`}  onChange={props.configHandler}/>\n        </div>\n      </div>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}