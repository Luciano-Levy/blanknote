{"ast":null,"code":"/* eslint-disable default-case */\nimport rgbHex from 'rgb-hex';\nexport function configsInit(Setcolor, SetbackgroundColor, Setfont, SetfontSize) {\n  const configs = ['color', 'backgroundColor', 'fontSize', 'font']; // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n  // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n  configs.forEach(a => {\n    const configLocal = localStorage.getItem(a);\n\n    if (configLocal != null) {\n      switch (a) {\n        case 'color':\n          Setcolor(configLocal);\n          break;\n\n        case 'backgroundColor':\n          SetbackgroundColor(configLocal);\n          break;\n\n        case 'font':\n          Setfont(configLocal);\n          break;\n\n        case 'fontSize':\n          SetfontSize(configLocal);\n          break;\n      }\n    } else {\n      switch (a) {\n        case 'color':\n          const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'));\n          Setcolor(color);\n          localStorage.setItem('color', color);\n          break;\n\n        case 'backgroundColor':\n          const backgroundColor = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'));\n          SetbackgroundColor(backgroundColor);\n          localStorage.setItem('backgroundColor', backgroundColor);\n          break;\n\n        case 'font':\n          const font = window.getComputedStyle(document.body).getPropertyValue('font-family');\n          Setfont(font);\n          localStorage.setItem('font', font);\n          break;\n\n        case 'fontSize':\n          const fontSize = window.getComputedStyle(document.body).getPropertyValue('font-size');\n          SetfontSize(fontSize);\n          localStorage.setItem('fontSize', fontSize);\n          break;\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/home/luciano/Dev/Blanktxt/client/src/components/functions.js"],"names":["rgbHex","configsInit","Setcolor","SetbackgroundColor","Setfont","SetfontSize","configs","forEach","a","configLocal","localStorage","getItem","color","window","getComputedStyle","document","body","getPropertyValue","setItem","backgroundColor","font","fontSize"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,SAAnB;AAGA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,kBAA/B,EAAmDC,OAAnD,EAA4DC,WAA5D,EAAyE;AAE9E,QAAMC,OAAO,GAAG,CAAC,OAAD,EAAU,iBAAV,EAA6B,UAA7B,EAAyC,MAAzC,CAAhB,CAF8E,CAI9E;AACA;;AAGAA,EAAAA,OAAO,CAACC,OAAR,CAAgBC,CAAC,IAAI;AACnB,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBH,CAArB,CAApB;;AACA,QAAIC,WAAW,IAAI,IAAnB,EAAyB;AAEvB,cAAQD,CAAR;AACE,aAAK,OAAL;AACEN,UAAAA,QAAQ,CAACO,WAAD,CAAR;AACA;;AACF,aAAK,iBAAL;AACEN,UAAAA,kBAAkB,CAACM,WAAD,CAAlB;AACA;;AACF,aAAK,MAAL;AACEL,UAAAA,OAAO,CAACK,WAAD,CAAP;AACA;;AACF,aAAK,UAAL;AACEJ,UAAAA,WAAW,CAACI,WAAD,CAAX;AACA;AAZJ;AAgBD,KAlBD,MAkBO;AAEL,cAAQD,CAAR;AACE,aAAK,OAAL;AACE,gBAAMI,KAAK,GAAG,MAAMZ,MAAM,CAACa,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,OAAxD,CAAD,CAA1B;AACAf,UAAAA,QAAQ,CAACU,KAAD,CAAR;AACAF,UAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BN,KAA9B;AACA;;AACF,aAAK,iBAAL;AACE,gBAAMO,eAAe,GAAG,MAAMnB,MAAM,CAACa,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,kBAAxD,CAAD,CAApC;AACAd,UAAAA,kBAAkB,CAACgB,eAAD,CAAlB;AACAT,UAAAA,YAAY,CAACQ,OAAb,CAAqB,iBAArB,EAAwCC,eAAxC;AACA;;AACF,aAAK,MAAL;AACE,gBAAMC,IAAI,GAAGP,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,aAAxD,CAAb;AACAb,UAAAA,OAAO,CAACgB,IAAD,CAAP;AACAV,UAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA6BE,IAA7B;AACA;;AACF,aAAK,UAAL;AACE,gBAAMC,QAAQ,GAAGR,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,gBAAvC,CAAwD,WAAxD,CAAjB;AACAZ,UAAAA,WAAW,CAACgB,QAAD,CAAX;AACAX,UAAAA,YAAY,CAACQ,OAAb,CAAqB,UAArB,EAAiCG,QAAjC;AACA;AApBJ;AAwBD;AACF,GA/CD;AAuDD","sourcesContent":["/* eslint-disable default-case */\nimport rgbHex from 'rgb-hex'\n\n\nexport function configsInit(Setcolor, SetbackgroundColor, Setfont, SetfontSize) {\n\n  const configs = ['color', 'backgroundColor', 'fontSize', 'font']\n\n  // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n  // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n\n  configs.forEach(a => {\n    const configLocal = localStorage.getItem(a);\n    if (configLocal != null) {\n\n      switch (a) {\n        case 'color':\n          Setcolor(configLocal)\n          break;\n        case 'backgroundColor':\n          SetbackgroundColor(configLocal)\n          break;\n        case 'font':\n          Setfont(configLocal)\n          break;\n        case 'fontSize':\n          SetfontSize(configLocal)\n          break;\n\n\n      }\n    } else {\n\n      switch (a) {\n        case 'color':\n          const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'))\n          Setcolor(color)\n          localStorage.setItem('color', color)\n          break;\n        case 'backgroundColor':\n          const backgroundColor = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'))\n          SetbackgroundColor(backgroundColor)\n          localStorage.setItem('backgroundColor', backgroundColor)\n          break;\n        case 'font':\n          const font = window.getComputedStyle(document.body).getPropertyValue('font-family')\n          Setfont(font)\n          localStorage.setItem('font', font)\n          break;\n        case 'fontSize':\n          const fontSize = window.getComputedStyle(document.body).getPropertyValue('font-size')\n          SetfontSize(fontSize)\n          localStorage.setItem('fontSize', fontSize)\n          break;\n\n\n      }\n    }\n  })\n\n\n\n\n\n\n\n}"]},"metadata":{},"sourceType":"module"}