{"ast":null,"code":"var _jsxFileName = \"/home/luciano/Dev/Blanktxt/client/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './styles/text.css';\nimport ModalLogin from './components/ModalLogin.jsx';\nimport Display from './components/Display.jsx';\nimport Input from './components/Input.jsx';\nimport ConfigMenu from './components/ConfigMenu.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Text() {\n  _s();\n\n  const container = useRef(null);\n  const [txt, Settxt] = useState('');\n  const [shift, Setshift] = useState(true);\n  const [login, Setlogin] = useState(true); //idenifacador\n\n  useEffect(() => {\n    const user = localStorage.getItem('username');\n\n    if (user != null) {\n      Setlogin(false);\n    } else {\n      Setlogin(true);\n    }\n\n    ;\n  }, []); //cargador\n\n  useEffect(() => {\n    //hacer efecto CSS para ocultar que el useEffect tarda en hacer el fetch y mostrar los datos en el text area.\n    const user = localStorage.getItem('username');\n\n    if (user != null) {\n      const requestOptions = {\n        method: 'GET'\n      };\n      fetch(`api/${user}`, requestOptions).then(response => response.json()).then(data => Settxt(data.text));\n    }\n\n    ;\n  }, []); //guardado del texto en db, cada ves que cambie el texto\n\n  useEffect(() => {\n    updateTxt(txt);\n    console.log(container);\n  }, [txt]); //maneja el cambio de valores y intercambia visibilidad con el estatico\n\n  function changeInpt(e) {\n    const textareaValue = e.target.value;\n\n    if (textareaValue.length > 0) {\n      Setshift(false);\n      Settxt(textareaValue);\n    }\n\n    ;\n  }\n\n  ;\n\n  function changeDispl(e) {\n    Setshift(true);\n  }\n\n  ; //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(ConfigMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      ref: container,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        changeInpt: changeInpt,\n        txt: txt,\n        shift: shift\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Display, {\n        changeDispl: changeDispl,\n        txt: txt,\n        shift: shift\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), login && /*#__PURE__*/_jsxDEV(ModalLogin, {\n      Setlogin: Setlogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Text, \"tC9ChhwGAH79Bps/klCH35Yo7Rg=\");\n\n_c = Text;\n;\nexport async function updateTxt(txt) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: localStorage.getItem('username'),\n      txt: txt\n    })\n  };\n  fetch(\"/api\", requestOptions);\n}\nexport default Text;\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"sources":["/home/luciano/Dev/Blanktxt/client/src/App.jsx"],"names":["React","useState","useEffect","useRef","ModalLogin","Display","Input","ConfigMenu","Text","container","txt","Settxt","shift","Setshift","login","Setlogin","user","localStorage","getItem","requestOptions","method","fetch","then","response","json","data","text","updateTxt","console","log","changeInpt","e","textareaValue","target","value","length","changeDispl","headers","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport './styles/text.css';\nimport ModalLogin from './components/ModalLogin.jsx';\nimport Display from './components/Display.jsx';\nimport Input from './components/Input.jsx';\nimport ConfigMenu from './components/ConfigMenu.jsx'\n\n\nfunction Text() {\n\n  const container = useRef(null)\n\n  const[txt, Settxt] = useState('');\n\n  const[shift, Setshift] = useState(true);\n\n  const[login, Setlogin] = useState(true);\n\n\n\n  //idenifacador\n  useEffect(()=> {\n\n    const user = localStorage.getItem('username');\n    if (user != null ){\n      Setlogin(false);\n    }\n    else {\n        Setlogin(true);\n    };\n  },[]);\n\n  //cargador\n  useEffect(() => {\n\n      //hacer efecto CSS para ocultar que el useEffect tarda en hacer el fetch y mostrar los datos en el text area.\n\n      const user = localStorage.getItem('username');\n      if(user != null){\n\n\n      const requestOptions = {\n        method: 'GET',\n      };\n\n      fetch(`api/${user}`, requestOptions).then(response => response.json()).then(data => Settxt(data.text));\n\n\n\n    };\n\n\n  },[])\n\n\n  //guardado del texto en db, cada ves que cambie el texto\n  useEffect(() => {\n    updateTxt(txt);\n    console.log(container);\n  }\n,[txt]);\n\n\n\n  //maneja el cambio de valores y intercambia visibilidad con el estatico\n  function changeInpt(e){\n    const textareaValue = e.target.value;\n    if (textareaValue.length > 0) {\n      Setshift(false);\n      Settxt(textareaValue);\n    };\n  };\n\n  function changeDispl(e){\n\n    Setshift(true);\n\n  };\n  //\n\n  return(\n    <div id='main'>\n\n      <ConfigMenu></ConfigMenu>\n\n      <div className='container' ref={container}>\n        <Input changeInpt={changeInpt} txt={txt} shift={shift}></Input>\n        <Display changeDispl={changeDispl} txt={txt} shift={shift}></Display>\n      </div>\n      {login && <ModalLogin Setlogin={Setlogin}></ModalLogin>}\n    </div>\n  );\n};\n\n\n\n\nexport async function updateTxt(txt){\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({user:localStorage.getItem('username'),txt: txt})\n  };\n\n   fetch(\"/api\", requestOptions);\n\n\n}\n\n\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}