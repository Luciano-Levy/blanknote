[{"/home/luciano/Dev/Blanktxt/client/src/index.js":"1","/home/luciano/Dev/Blanktxt/client/src/App.jsx":"2","/home/luciano/Dev/Blanktxt/client/src/components/ModalLogin.jsx":"3","/home/luciano/Dev/Blanktxt/client/src/components/Input.jsx":"4","/home/luciano/Dev/Blanktxt/client/src/components/Display.jsx":"5","/home/luciano/Dev/Blanktxt/client/src/components/ConfigMenu.jsx":"6","/home/luciano/Dev/Blanktxt/client/src/components/Config.jsx":"7","/home/luciano/Dev/Blanktxt/client/src/components/functions.js":"8"},{"size":233,"mtime":1641838806388,"results":"9","hashOfConfig":"10"},{"size":2256,"mtime":1642039875565,"results":"11","hashOfConfig":"10"},{"size":1342,"mtime":1642434561212,"results":"12","hashOfConfig":"10"},{"size":359,"mtime":1642099896217,"results":"13","hashOfConfig":"10"},{"size":292,"mtime":1642015803619,"results":"14","hashOfConfig":"10"},{"size":2036,"mtime":1642385242104,"results":"15","hashOfConfig":"10"},{"size":1462,"mtime":1642386974647,"results":"16","hashOfConfig":"10"},{"size":1695,"mtime":1642166901264,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"10jkfj9",{"filePath":"21","messages":"22","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/home/luciano/Dev/Blanktxt/client/src/index.js",[],["37","38"],"/home/luciano/Dev/Blanktxt/client/src/App.jsx",["39"],"import React, {useState, useEffect, useRef} from 'react';\nimport './styles/text.css';\nimport ModalLogin from './components/ModalLogin.jsx';\nimport Display from './components/Display.jsx';\nimport Input from './components/Input.jsx';\nimport ConfigMenu from './components/ConfigMenu.jsx'\n\n// usar destructuracion de ahora en mas, es mas facil saber que pide el componente\nfunction Text() {\n\n  const container = useRef(null)\n\n  const[txt, Settxt] = useState('');\n\n  const[shift, Setshift] = useState(true);\n\n  const[login, Setlogin] = useState(true);\n\n\n\n  //idenifacador\n  useEffect(()=> {\n\n    const user = localStorage.getItem('username');\n    if (user != null ){\n      Setlogin(false);\n    }\n    else {\n        Setlogin(true);\n    };\n  },[]);\n\n  //cargador\n  useEffect(() => {\n\n      //hacer efecto CSS para ocultar que el useEffect tarda en hacer el fetch y mostrar los datos en el text area.\n\n      const user = localStorage.getItem('username');\n      if(user != null){\n\n\n      const requestOptions = {\n        method: 'GET',\n      };\n\n      fetch(`api/${user}`, requestOptions).then(response => response.json()).then(data => Settxt(data.text));\n\n\n\n    };\n\n\n  },[])\n\n\n  //guardado del texto en db, cada ves que cambie el texto\n  useEffect(() => {\n    updateTxt(txt);\n  }\n,[txt]);\n\n\n\n  //maneja el cambio de valores y intercambia visibilidad con el estatico\n  function changeInpt(e){\n    const textareaValue = e.target.value;\n    if (textareaValue.length > 0) {\n      Setshift(false);\n      Settxt(textareaValue);\n    };\n  };\n\n  function changeDispl(e){\n\n    Setshift(true);\n\n  };\n  //\n\n  return(\n    <div id='main'>\n\n      <ConfigMenu containerRef={container}></ConfigMenu>\n\n      <div className='container' ref={container}>\n        <Input changeInpt={changeInpt} txt={txt} shift={shift}></Input>\n        <Display changeDispl={changeDispl} txt={txt} shift={shift}></Display>\n      </div>\n      {login && <ModalLogin Setlogin={Setlogin}></ModalLogin>}\n    </div>\n  );\n};\n\n\n\n\nexport async function updateTxt(txt){\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({user:localStorage.getItem('username'),txt: txt})\n  };\n\n   fetch(\"/api\", requestOptions);\n\n\n}\n\n\n\nexport default Text;\n","/home/luciano/Dev/Blanktxt/client/src/components/ModalLogin.jsx",["40","41"],"/home/luciano/Dev/Blanktxt/client/src/components/Input.jsx",[],"/home/luciano/Dev/Blanktxt/client/src/components/Display.jsx",[],"/home/luciano/Dev/Blanktxt/client/src/components/ConfigMenu.jsx",["42"],"/home/luciano/Dev/Blanktxt/client/src/components/Config.jsx",[],"/home/luciano/Dev/Blanktxt/client/src/components/functions.js",["43","44","45"],"import rgbHex from 'rgb-hex';\n\n\nexport const configsInit = (Setcolor,SetbackgroundColor,Setfont,SetfontSize) => {\n\n  const configs = ['color', 'backgroundColor', 'font', 'fontSize']\n\n  // es repetitivo pero es mas seguro que estar usando plantillas literales con eval\n  // bucar una manera DRY ya que los nombres de los estilos dependen de desde que objeto\n\n\n  configs.map(a => {\n\n    const configLocal = localStorage.getItem(a);\n    if (configLocal != null){\n\n      switch (a) {\n        case 'color':\n        Setcolor(configLocal)\n        break;\n        case 'backgroundColor':\n        SetbackgroundColor(configLocal)\n        break;\n        case 'font':\n        Setfont(configLocal)\n        break;\n        case 'fontSize':\n        SetfontSize(configLocal)\n        break;\n      }\n\n    }else{\n\n      switch (a) {\n      case 'color':\n      const color = '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('color'))\n      Setcolor(color)\n      localStorage.setItem('color', color)\n      break;\n      case 'backgroundColor':\n      const backgroundColor =  '#' + rgbHex(window.getComputedStyle(document.body).getPropertyValue('background-color'))\n      SetbackgroundColor(backgroundColor)\n      localStorage.setItem('backgroundColor', backgroundColor)\n      break;\n      case 'font':\n      const font = window.getComputedStyle(document.body).getPropertyValue('font-family')\n      Setfont(font)\n      localStorage.setItem('font',font)\n      break;\n      case 'fontSize':\n      const fontSize =  window.getComputedStyle(document.body).getPropertyValue('font-size')\n      SetfontSize(fontSize)\n      localStorage.setItem('fontSize', fontSize)\n      break;\n\n\n      }\n    }\n    })\n\n\n\n\n}\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":null,"fatal":true,"severity":2,"message":"50"},{"ruleId":"51","severity":1,"message":"52","line":27,"column":26,"nodeType":"53","messageId":"54","endLine":27,"endColumn":28},{"ruleId":"55","severity":1,"message":"56","line":47,"column":47,"nodeType":"53","messageId":"57","endLine":47,"endColumn":48},{"ruleId":"58","severity":1,"message":"59","line":38,"column":5,"nodeType":"60","messageId":"61","endLine":56,"endColumn":4},{"ruleId":"62","severity":1,"message":"63","line":12,"column":17,"nodeType":"64","messageId":"65","endLine":12,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":17,"column":7,"nodeType":"60","messageId":"61","endLine":30,"endColumn":8},{"ruleId":"58","severity":1,"message":"59","line":34,"column":7,"nodeType":"60","messageId":"61","endLine":57,"endColumn":8},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"Parsing error: /home/luciano/Dev/Blanktxt/client/babel.config.js: Error while loading config - Unexpected token ':'","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]